<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="xs fn">
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template match="/">
		<fattach>
			<xsl:attribute name="xsi:noNamespaceSchemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'C:/Integration/RightNow/XSDs/fattach.xsd'"/>
			<xsl:for-each select="connector_ret/function/ret_val/pair/pair">
				<xsl:variable name="var1_pair" as="node()*" select="pair"/>
				<attachment>
					<xsl:variable name="var4_resultof_filter" as="node()*">
						<xsl:for-each select="$var1_pair[(fn:string(@name) = 'content_type')]">
							<xsl:variable name="var2_resultof_map" as="xs:boolean*">
								<xsl:for-each select="node()">
									<xsl:sequence select="fn:boolean(self::text())"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var3_resultof_any" as="xs:boolean" select="fn:exists($var2_resultof_map[.])"/>
							<xsl:if test="$var3_resultof_any">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var4_resultof_filter">
						<xsl:variable name="var5_resultof_map" as="xs:string*">
							<xsl:for-each select="node()[fn:boolean(self::text())]">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</xsl:variable>
						<content_type>
							<xsl:sequence select="xs:string(fn:string-join(for $x in $var5_resultof_map return xs:string($x), ' '))"/>
						</content_type>
					</xsl:for-each>
					<xsl:variable name="var8_resultof_filter" as="node()*">
						<xsl:for-each select="$var1_pair[(fn:string(@name) = 'created')]">
							<xsl:variable name="var6_resultof_map" as="xs:boolean*">
								<xsl:for-each select="node()">
									<xsl:sequence select="fn:boolean(self::text())"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var7_resultof_any" as="xs:boolean" select="fn:exists($var6_resultof_map[.])"/>
							<xsl:if test="$var7_resultof_any">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var8_resultof_filter">
						<xsl:variable name="var9_resultof_map" as="xs:string*">
							<xsl:for-each select="node()[fn:boolean(self::text())]">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</xsl:variable>
						<created>
							<xsl:sequence select="xs:string(fn:string-join(for $x in $var9_resultof_map return xs:string($x), ' '))"/>
						</created>
					</xsl:for-each>
					<xsl:variable name="var12_resultof_filter" as="node()*">
						<xsl:for-each select="$var1_pair[(fn:string(@name) = 'file_id')]">
							<xsl:variable name="var10_resultof_map" as="xs:boolean*">
								<xsl:for-each select="node()">
									<xsl:sequence select="fn:boolean(self::text())"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var11_resultof_any" as="xs:boolean" select="fn:exists($var10_resultof_map[.])"/>
							<xsl:if test="$var11_resultof_any">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var12_resultof_filter">
						<xsl:variable name="var13_resultof_map" as="xs:string*">
							<xsl:for-each select="node()[fn:boolean(self::text())]">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</xsl:variable>
						<file_id>
							<xsl:sequence select="xs:string(fn:string-join(for $x in $var13_resultof_map return xs:string($x), ' '))"/>
						</file_id>
					</xsl:for-each>
					<xsl:variable name="var16_resultof_filter" as="node()*">
						<xsl:for-each select="$var1_pair[(fn:string(@name) = 'size')]">
							<xsl:variable name="var14_resultof_map" as="xs:boolean*">
								<xsl:for-each select="node()">
									<xsl:sequence select="fn:boolean(self::text())"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var15_resultof_any" as="xs:boolean" select="fn:exists($var14_resultof_map[.])"/>
							<xsl:if test="$var15_resultof_any">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var16_resultof_filter">
						<xsl:variable name="var17_resultof_map" as="xs:string*">
							<xsl:for-each select="node()[fn:boolean(self::text())]">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</xsl:variable>
						<size>
							<xsl:sequence select="xs:string(fn:string-join(for $x in $var17_resultof_map return xs:string($x), ' '))"/>
						</size>
					</xsl:for-each>
					<xsl:variable name="var20_resultof_filter" as="node()*">
						<xsl:for-each select="$var1_pair[(fn:string(@name) = 'updated')]">
							<xsl:variable name="var18_resultof_map" as="xs:boolean*">
								<xsl:for-each select="node()">
									<xsl:sequence select="fn:boolean(self::text())"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var19_resultof_any" as="xs:boolean" select="fn:exists($var18_resultof_map[.])"/>
							<xsl:if test="$var19_resultof_any">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var20_resultof_filter">
						<xsl:variable name="var21_resultof_map" as="xs:string*">
							<xsl:for-each select="node()[fn:boolean(self::text())]">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</xsl:variable>
						<updated>
							<xsl:sequence select="xs:string(fn:string-join(for $x in $var21_resultof_map return xs:string($x), ' '))"/>
						</updated>
					</xsl:for-each>
					<xsl:variable name="var24_resultof_filter" as="node()*">
						<xsl:for-each select="$var1_pair[(fn:string(@name) = 'userfname')]">
							<xsl:variable name="var22_resultof_map" as="xs:boolean*">
								<xsl:for-each select="node()">
									<xsl:sequence select="fn:boolean(self::text())"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var23_resultof_any" as="xs:boolean" select="fn:exists($var22_resultof_map[.])"/>
							<xsl:if test="$var23_resultof_any">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var24_resultof_filter">
						<xsl:variable name="var25_resultof_map" as="xs:string*">
							<xsl:for-each select="node()[fn:boolean(self::text())]">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</xsl:variable>
						<userfname>
							<xsl:sequence select="xs:string(fn:string-join(for $x in $var25_resultof_map return xs:string($x), ' '))"/>
						</userfname>
					</xsl:for-each>
				</attachment>
			</xsl:for-each>
		</fattach>
	</xsl:template>
</xsl:stylesheet>
